/*
 * Did Mapping MS
 * A microservice for storing associations between user IDs and DIDs for applications that want to use DID-Auth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sphereon.sdk.did.mapping.api;

import com.sphereon.sdk.did.mapping.handler.ApiException;
import com.sphereon.sdk.did.mapping.model.DidMappingRequest;
import com.sphereon.sdk.did.mapping.model.DidMappingResponse;
import com.sphereon.sdk.did.mapping.model.ExceptionResponseBody;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DidMapControllerApi
 */
@Ignore
public class DidMapControllerApiTest {

    private final DidMapControllerApi api = new DidMapControllerApi();

    
    /**
     * Get a stored DID Map
     *
     * Retrieve a previously stored DID Map based of an App ID and User ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDidMapTest() throws ApiException {
        String applicationId = null;
        String userId = null;
        DidMappingResponse response = api.getDidMap(applicationId, userId);

        // TODO: test validations
    }
    
    /**
     * Store DID Maps
     *
     * Submit a list of DID Maps, associating a User ID to the necessary DID information for authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storeDidMapsTest() throws ApiException {
        DidMappingRequest didMapRequest = null;
        DidMappingResponse response = api.storeDidMaps(didMapRequest);

        // TODO: test validations
    }
    
}
